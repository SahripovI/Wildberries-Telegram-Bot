import telebot
from telebot import types
import requests
from io import BytesIO

TOKEN = 'API-TOKEN'
bot = telebot.TeleBot(TOKEN)

user_states = {}
user_language = {}

texts = {
    "welcome": {
        "ru": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:",
        "tj": "–•—É—à –æ–º–∞–¥–µ–¥! –õ—É—Ç—Ñ–∞–Ω —Ñ–∞—Ä–º–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:"
    },
    "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
    "main_menu": {
        "ru": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "tj": "üè† –ú–µ–Ω—é–∏ –∞—Å–æ—Å”£"
    },
    "help": {
        "ru": "üìå –ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üîç\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ üìã\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ üì¶\n‚Ä¢ –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ üéÅ\n‚Ä¢ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê",
        "tj": "üìå –§–∞—Ä–º–æ–Ω“≥–æ:\n‚Ä¢ “∂—É—Å—Ç—É“∑”Ø–∏ –º–æ–ª üîç\n‚Ä¢ –°–∞–Ω“∑–∏—à–∏ “≥–æ–ª–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à üìã\n‚Ä¢ –¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à üì¶\n‚Ä¢ –¢–∞—Ö—Ñ–∏—Ñ“≥–æ–∏ “∑–æ—Ä”£ üéÅ\n‚Ä¢ –ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω üåê"
    },
    "enter_name": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        "tj": "–ù–æ–º–∏ –º–æ–ª—Ä–æ –±–æ –∑–∞–±–æ–Ω–∏ —Ä—É—Å—Å–∏ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"
    },
    "enter_price": {
        "ru": "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ? (—É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ ‚ÇΩ)",
        "tj": "–ú–∞–±–ª–∞“ì–∏ –º–∞–∫—Å–∏–º—É–º—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –±–æ ‚ÇΩ):"
    },
    "not_number": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.",
        "tj": "–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥, –±–µ —Ä–∞–º–∑“≥–æ–∏ –∏–ª–æ–≤–∞–≥”£."
    },
    "no_results": {
        "ru": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.",
        "tj": "‚ùå –ú–æ–ª –º—É–≤–æ—Ñ–∏“õ–∏ —à–∞—Ä—Ç“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥."
    },
    "enter_order": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
        "tj": "–†–∞“õ–∞–º–∏ —Ñ–∞—Ä–º–æ–∏—à—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"
    },
    "enter_user_id": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "tj": "ID-–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"
    },
    "no_orders": {
        "ru": "‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        "tj": "‚ùå –§–∞—Ä–º–æ–∏—à —ë—Ñ—Ç –Ω–∞—à—É–¥."
    },
    "current_sales": {
        "ru": "üîî –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.",
        "tj": "üîî “≤–æ–ª–æ —Ç–∞—Ö—Ñ–∏—Ñ“≥–æ–∏ —Ñ–∞—ä–æ–ª –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–Ω–¥."
    }
}

@bot.message_handler(commands=["start"])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–†—É—Å—Å–∫–∏–π"), types.KeyboardButton("–¢–æ“∑–∏–∫”£"))
    bot.send_message(message.chat.id, texts["choose_language"], reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ["–†—É—Å—Å–∫–∏–π", "–¢–æ“∑–∏–∫”£"])
def set_language(msg):
    lang = "ru" if msg.text == "–†—É—Å—Å–∫–∏–π" else "tj"
    user_language[msg.chat.id] = lang
    user_states[msg.chat.id] = {}
    bot.send_message(msg.chat.id, texts["welcome"][lang], reply_markup=get_main_menu(lang))

@bot.message_handler(func=lambda msg: msg.text.lower() in ["–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", "–º–µ–Ω—é–∏ –∞—Å–æ—Å”£ üè†"])
def back_to_main(msg):
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["main_menu"][lang], reply_markup=get_main_menu(lang))

@bot.message_handler(func=lambda msg: msg.text.lower() in ["–ø–æ–º–æ—â—å ‚ùì", "–∫”Ø–º–∞–∫ ‚ùì"])
def help_info(msg):
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["help"][lang], reply_markup=get_main_menu(lang))

@bot.message_handler(func=lambda msg: msg.text.lower() in ["—Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê", "–∏–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω üåê"])
def change_language(msg):
    handle_start(msg)

@bot.message_handler(func=lambda msg: msg.text.lower() in ["–ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ üìç", "–Ω—É“õ—Ç–∞“≥–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–æ–ª üìç"])
def pickup_points(msg):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É/–•–∞—Ä–∏—Ç–∞—Ä–æ –∫—É—à–æ–µ–¥üó∫", url="https://www.wildberries.ru/services/besplatnaya-dostavka"))
    lang = user_language.get(msg.chat.id, "ru")
    text = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏:" if lang == "ru" else "–ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –Ω—É“õ—Ç–∞“≥–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–æ–ª –∫–ª–∏–∫ –∫—É–Ω–µ–¥:"
    bot.send_message(msg.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text.lower() in ["–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üîç", "“∑—É—Å—Ç—É“∑”Ø–∏ –º–æ–ª üîç"])
def search_product(msg):
    user_states[msg.chat.id] = {"step": "awaiting_query"}
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["enter_name"][lang], reply_markup=get_back_menu(lang))

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "awaiting_query")
def handle_product_name(msg):
    user_states[msg.chat.id]["query"] = msg.text
    user_states[msg.chat.id]["step"] = "awaiting_price"
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["enter_price"][lang])

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "awaiting_price")
def fetch_product(msg):
    lang = user_language.get(msg.chat.id, "ru")
    if not msg.text.replace(" ", "").isdigit():
        bot.send_message(msg.chat.id, texts["not_number"][lang])
        return

    max_price = int(msg.text.strip())
    query = user_states[msg.chat.id].get("query")
    user_states[msg.chat.id] = {}

    url = f"https://search.wb.ru/exactmatch/ru/common/v4/search?query={query}&curr=rub&dest=-1257786&resultset=catalog"
    response = requests.get(url)

    if response.status_code != 200:
        bot.send_message(msg.chat.id, "‚ùå API error")
        return

    results = response.json().get("data", {}).get("products", [])
    filtered = [p for p in results if p.get("salePriceU", 99999999) / 100 <= max_price][:10]

    if not filtered:
        bot.send_message(msg.chat.id, texts["no_results"][lang])
        return

    for product in filtered:
        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = product.get("salePriceU", 0) / 100
        brand = product.get("brand", "–ë–µ–∑ –±—Ä–µ–Ω–¥–∞")
        product_url = f"https://www.wildberries.ru/catalog/{product['id']}/detail.aspx"
        img_url = f"https://basket-{product['id'] // 1000000:02d}.wb.ru/vol{product['id'] // 100000}/{product['id'] // 1000}/{product['id']}/images/big/1.jpg"

        caption = (
            f"üõçÔ∏è <b>{name}</b>\n"
            f"üè∑ <b>–ë—Ä–µ–Ω–¥:</b> {brand}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n"
            f"üîó <a href='{product_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Wildberries</a>"
        )

        try:
            img_data = requests.get(img_url)
            if img_data.status_code == 200:
                image = BytesIO(img_data.content)
                image.name = "product.jpg"
                bot.send_photo(msg.chat.id, image, caption=caption, parse_mode="HTML")
            else:
                bot.send_message(msg.chat.id, caption, parse_mode="HTML")
        except:
            bot.send_message(msg.chat.id, caption, parse_mode="HTML")

@bot.message_handler(func=lambda msg: msg.text.lower() in ["–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ üìã", "—Å–∞–Ω“∑–∏—à–∏ “≥–æ–ª–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à üìã"])
def check_order_status(msg):
    user_states[msg.chat.id] = {"step": "awaiting_order"}
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["enter_order"][lang], reply_markup=get_back_menu(lang))

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "awaiting_order")
def handle_order_check(msg):
    user_states[msg.chat.id] = {}
    order_id = msg.text.strip()
    lang = user_language.get(msg.chat.id, "ru")

    mock_status = {
        "1001": "üì¶ –ó–∞–∫–∞–∑ ‚Ññ1001 ‚Äî –ü–æ–ª—É—á–µ–Ω",
        "1002": "üöö –ó–∞–∫–∞–∑ ‚Ññ1002 ‚Äî –í –ø—É—Ç–∏",
        "1003": "üìç –ó–∞–∫–∞–∑ ‚Ññ1003 ‚Äî –í –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏"
    }

    status = mock_status.get(order_id, texts["no_orders"][lang])
    bot.send_message(msg.chat.id, status)

@bot.message_handler(func=lambda msg: msg.text.lower() in ["–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ üì¶", "—Ç–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à üì¶"])
def order_history(msg):
    user_states[msg.chat.id] = {"step": "awaiting_user_id"}
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["enter_user_id"][lang], reply_markup=get_back_menu(lang))

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "awaiting_user_id")
def handle_history(msg):
    user_states[msg.chat.id] = {}
    lang = user_language.get(msg.chat.id, "ru")

    mock_data = {
        "user1": ["üì¶ –ó–∞–∫–∞–∑ ‚Ññ1001 ‚Äî –ü–æ–ª—É—á–µ–Ω", "üì¶ –ó–∞–∫–∞–∑ ‚Ññ1002 ‚Äî –í –ø—É—Ç–∏"]
    }

    orders = mock_data.get(msg.text.strip())
    if not orders:
        bot.send_message(msg.chat.id, texts["no_orders"][lang])
    else:
        bot.send_message(msg.chat.id, "\n".join(orders))

@bot.message_handler(func=lambda msg: msg.text.lower() in ["—Ç–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ üéÅ", "—Ç–∞—Ö—Ñ–∏—Ñ“≥–æ–∏ “∑–æ—Ä”£ üéÅ"])
def current_sales(msg):
    lang = user_language.get(msg.chat.id, "ru")
    bot.send_message(msg.chat.id, texts["current_sales"][lang], reply_markup=get_back_menu(lang))

def get_main_menu(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "ru":
        markup.add(
            types.KeyboardButton("–ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ üìç"),
            types.KeyboardButton("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üîç"),
            types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ üì¶"),
            types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ üìã"),
            types.KeyboardButton("–¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ üéÅ"),
            types.KeyboardButton("–ü–æ–º–æ—â—å ‚ùì"),
            types.KeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê")
        )
    else:
        markup.add(
            types.KeyboardButton("–ù—É“õ—Ç–∞“≥–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–æ–ª üìç"),
            types.KeyboardButton("“∂—É—Å—Ç—É“∑”Ø–∏ –º–æ–ª üîç"),
            types.KeyboardButton("–¢–∞—ä—Ä–∏—Ö–∏ —Ñ–∞—Ä–º–æ–∏—à üì¶"),
            types.KeyboardButton("–°–∞–Ω“∑–∏—à–∏ “≥–æ–ª–∞—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à üìã"),
            types.KeyboardButton("–¢–∞—Ö—Ñ–∏—Ñ“≥–æ–∏ “∑–æ—Ä”£ üéÅ"),
            types.KeyboardButton("–ö”Ø–º–∞–∫ ‚ùì"),
            types.KeyboardButton("–ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω üåê")
        )
    return markup


def get_back_menu(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†" if lang == "ru" else "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£ üè†"
    markup.add(types.KeyboardButton(text))
    return markup

@bot.message_handler(commands=["start"])
def cmd_start(message):
    handle_start(message)

@bot.message_handler(commands=["help"])
def cmd_help(message):
    help_info(message)

@bot.message_handler(commands=["pickup_points"])
def cmd_pickup_points(message):
    pickup_points(message)

@bot.message_handler(commands=["search_product"])
def cmd_search_product(message):
    search_product(message)

@bot.message_handler(commands=["check_order_status"])
def cmd_check_order_status(message):
    check_order_status(message)

@bot.message_handler(commands=["order_history"])
def cmd_order_history(message):
    order_history(message)

@bot.message_handler(commands=["current_sales"])
def cmd_current_sales(message):
    current_sales(message)

@bot.message_handler(commands=["back"])
def cmd_back(message):
    back_to_main(message)


bot.polling(none_stop=True)
